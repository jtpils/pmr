#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/io/pcd_io.h>
#include <iostream>
#include <boost/lexical_cast.hpp>

typedef pcl::PointXYZ PointT;
typedef pcl::PointCloud<PointT> PointCloudT;
typedef PointCloudT::Ptr PointCloudPtr;

void euler2matrix(Eigen::Vector3f euler, Eigen::Matrix4f & transf)
{
}

void matrix2euler(Eigen::Matrix4f & transf, Eigen::Vector3f euler)
{

}

int main(int argc, char** argv)
{
  PointCloudPtr cloud(new PointCloudT);

  //load pcd data
  if(pcl::io::loadPCDFile(argv[1],*cloud)==-1)
  {
    std::cerr<<">>> ERROR: Load pcd data from "<<argv[1]
      <<" failed"<<std::endl;
    return -1;
  }
  std::cout<<">>> Load pcd data from "<<argv[1]
      <<" finished"<<std::endl;

  //transform by euler angle and translation
  Eigen::Vector3f euler;
  try
  {
    euler(0)=boost::lexical_cast<float>(argv[2]);
    euler(1)=boost::lexical_cast<float>(argv[3]);
    euler(2)=boost::lexical_cast<float>(argv[4]);
  }
  catch
  {
    std::cerr<<">>> ERROR: parse euler angles error!"<<std::endl;
    return -1;
  }
  Eigen::Vector3f translation;
  try
  {
    translation(0)=boost::lexical_cast<float>(argv[5]);
    translation(1)=boost::lexical_cast<float>(argv[6]);
    translation(2)=boost::lexical_cast<float>(argv[7]);
  }
  catch
  {
    std::cerr<<">>> ERROR: parse translation error!"<<std::endl;
    return -1;
  }

  //save pcd file
}
